@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MudBlazor
@using WebUI.Services.Api.Interfaces;
@using WebUI.Services.Helpers;
@using global::Data.ViewModels;
@using MudBlazor.Dialog;
@inject INoteService noteService;
@inject IJSRuntime JsRuntime;
@inject IMyDialogService DialogService;
@inject ISnackbar Snackbar;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavManager;
@attribute [Authorize];

@code {
    private IList<NoteViewModel> notes = new List<NoteViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await noteService.GetAll();

        if (result != null)
            notes = result.ToList();
    }

    private async Task DeleteNote(NoteViewModel item)
    {
        var dialogResult = await DialogService.Confirm("Are you want to delete the note?");

        if (dialogResult)
        {
            var result = await noteService.Delete(item.Id);
            notes.Remove(item);
            Snackbar.Add("Note Deleted", Severity.Success);
        }
    }

    private async Task CreateNote()
    {
        var dialogResult = await DialogService.Create<CreateNoteViewModel>
            (typeof(CreateNoteDialog));

        if (dialogResult == null)
            return;

        var result = await noteService.Create(dialogResult);

        if (result != Guid.Empty)
        {
            NoteViewModel? note = await noteService.GetById(result);

            if (note != null)
            {
                notes.Add(note);
                Snackbar.Add("Note Created", Severity.Success);
            }
        }
    }

    private async Task UpdateNote(NoteViewModel note)
    {
        var newNote = new UpdateNoteViewModel();
        newNote.Id = note.Id;
        newNote.Title = note.Title;
        newNote.Details = note.Details;

        var dialogResult = await DialogService.Update<UpdateNoteViewModel>
            (typeof(UpdateNoteDialog), newNote);

        if (dialogResult == null)
            return;

        await noteService.Update(dialogResult);
        var replace = await noteService.GetById(note.Id);

        if (replace != null)
        {
            notes[notes.IndexOf(note)] = replace;
            Snackbar.Add("Note Updated", Severity.Success);
        }
    }

    private async Task DeleteAllNotes()
    {
        var dialogResult = await DialogService.Confirm("Are you want to delete this notes?");

        if (dialogResult)
        {
            await noteService.DeleteAll();
            notes.Clear();
            Snackbar.Add("Notes Deleted", Severity.Success);
        }
    }
}


@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="mt-5">
        <MudItem xl="3" lg="3" md="4" sm="6" xs="12">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                   Variant="Variant.Filled" Color="Color.Success"
                   @onclick="CreateNote" FullWidth="true">Create Note</MudButton>
        </MudItem>
        <MudItem xl="3" lg="3" md="4" sm="6" xs="12">
            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                   Variant="Variant.Filled" Color="Color.Error"
                   @onclick="DeleteAllNotes" FullWidth="true">Delete Notes</MudButton>
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="mt-3" Row="true">
        @foreach (var note in notes)
        {
            <MudItem xl="3" lg="4" md="6" sm="6" xs="12">
                <MudCard Outlined="true" Class="h-100 d-flex justify-content-strech flex-column">
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@note.Title</MudText>
                        <MudText Typo="Typo.body1">@note.Details</MudText>
                    </MudCardContent>
                    <div class="mt-auto">
                        <MudCardActions>
                            <div Class="w-100">
                                <MudText Typo="Typo.caption">Created : @note.CreationDate.ToString()</MudText>
                                @if (@note.EditDate != null)
                                {
                                    <MudText Typo="Typo.caption">Edit : @note.EditDate.ToString()</MudText>
                                }
                            </div>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info"
                                   class="mr-2" @onclick="@(args => UpdateNote(note))">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error"
                                   @onclick="@(args => DeleteNote(note))">
                            </MudIconButton>
                        </MudCardActions>
                    </div>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

